- name: Clone the template
  vmware_guest:
    hostname: "{{ vmwaredata.vcenter_server }}"
    username: "{{ vmwaredata.vcenter_user }}"
    password: "{{ vmwaredata.vcenter_pass }}"
    validate_certs: False
    name: "{{ server_stack }}-{{ item.name }}"
    template: "{{ vmwaredata.vcenter_vm_template }}"
    datacenter: "{{ vmwaredata.datacenter_name }}"
    folder: "/{{ vmwaredata.datacenter_name }}/vm"
    esxi_hostname: "{{ vmwaredata.esxi_hostname }}"
    datastore: "{{ vmwaredata.datastore_name }}"
    use_instance_uuid: true
    disk:
    - size_gb: "20"
      type: "thin"
      datastore: "{{ vmwaredata.datastore_name }}"

    hardware:
      num_cpus: 2
      memory_mb: 4096
    networks:
      - name: '{{ vmwaredata.network_name }}'
        connected: true
        start_connected: true
    state: poweredon
    wait_for_ip_address: yes
    annotation: "{{ item.role }}"
    customization:
      hostname: '{{ item.name }}'
    wait_for_customization: true
  loop: "{{ vmlist }}"

- name: set network adapters
  vmware_guest_network:
    hostname: "{{ vmwaredata.vcenter_server }}"
    username: "{{ vmwaredata.vcenter_user }}"
    password: "{{ vmwaredata.vcenter_pass }}"
    validate_certs: False
    name: "{{ server_stack }}-{{ item.name }}"
    datacenter: "{{ vmwaredata.datacenter_name }}"
    folder: "/{{ vmwaredata.datacenter_name }}/vm"
    esxi_hostname: "{{ vmwaredata.esxi_hostname }}"
    networks:
      - name: '{{ vmwaredata.network_name }}'
        connected: true
        start_connected: true
        device_type: vmxnet3
        state: present
  loop: "{{ vmlist }}"

#- name: Get category id from the given tag
#  vmware_tag_info:
#    hostname: '{{ vmwaredata.vcenter_server }}'
#    username: '{{ vmwaredata.vcenter_user }}'
#    password: '{{ vmwaredata.vcenter_pass }}'
#    validate_certs: no
#  register: tag_details
#
#- name: Create stack tag
#  vmware_tag:
#    hostname: "{{ vmwaredata.vcenter_server }}"
#    username: "{{ vmwaredata.vcenter_user }}"
#    password: "{{ vmwaredata.vcenter_pass }}"
#    validate_certs: no
#    tag_name: "{{ server_stack }}"
#    category_id: "{{ tag_details.tag_facts['k3s']['tag_category_id'] }}"
#    tag_description: ""
#    state: present

- name: Add tags to a virtual machine
  vmware_tag_manager:
    hostname: '{{ vmwaredata.vcenter_server }}'
    username: '{{ vmwaredata.vcenter_user }}'
    password: '{{ vmwaredata.vcenter_pass }}'
    validate_certs: no
    tag_names:
      - "k3s:{{ item.role }}"
    object_name: "{{ server_stack }}-{{ item.name }}"
    object_type: VirtualMachine
    state: add
  loop: "{{ vmlist }}"


- name: Add tags to a virtual machine
  vmware_tag_manager:
    hostname: '{{ vmwaredata.vcenter_server }}'
    username: '{{ vmwaredata.vcenter_user }}'
    password: '{{ vmwaredata.vcenter_pass }}'
    validate_certs: no
    tag_names:
      - "k3s:{{ server_stack }}"
    object_name: "{{ server_stack }}-{{ item.name }}"
    object_type: VirtualMachine
    state: add
  loop: "{{ vmlist }}"

- set_fact:
    replace_string: "{{ server_stack }}-"
- set_fact:
    new_hostname: "{{ inventory_hostname.replace(replace_string,'').split('_')[0] }}"

#Fix for problems in vsphere image template
- name: change hostname to vmware object name
  hostname:
    name: "{{ new_hostname }}"
  register: hostname_data
- name: add correct hostname to /etc/hosts
  lineinfile:
    dest: /etc/hosts
    regexp: '^127\.0\.0\.1[ \t]+localhost'
    line: "127.0.0.1 localhost {{ new_hostname }}"
    state: present
- name: reboot for new hostname
  reboot:
  when: hostname_data.changed
